name: "Clone Repositories"
description: "Github Action to clone a public or private Github repository and access its content on others repositories workflows."

inputs:
  owner:
    description: "Repository Owner"
    required: true
  useremail:
    description: "Github user email"
    required: true
  root-repo:
    description: "Root repository name"
    required: true
  repositories:
    description: "Comma-separated list of repository names"
    required: true
  access-token:
    description: "PAT with repository scope (https://github.com/settings/tokens)"
    required: false
  depth:
    description: "Depth of the clone (default: full history)"
    required: false
    default: ""
  branch:
    description: "Branch name (default: main)"
    required: false
    default: "main"
  submodule:
    description: "Clone with submodules"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
  - name: Set Git user
      run: |
        git config --global user.email ${{ inputs.useremail }}
        git config --global user.name ${{ inputs.owner }}
      shell: bash

    - name: Clone root repository
      run: |
        git clone https://${{ inputs.access-token }}@github.com/${{ inputs.owner }}/${{ inputs.root-repo }}.git
        cd ${{ inputs.root-repo }}
        ls -la
      shell: bash

    - name: Clone or create and sync repositories
      run: |
        IFS=',' read -ra REPO_ARRAY <<< "${{ inputs.repositories }}"
        for REPO in "${REPO_ARRAY[@]}"; do
          STATUS_CODE=$(curl -o /dev/null -s -w "%{http_code}\n" -H "Authorization: token ${{ inputs.access-token }}" https://api.github.com/repos/${{ inputs.owner }}/$REPO)
          if [ "$STATUS_CODE" = "404" ]; then
            curl -X POST -H "Authorization: token ${{ inputs.access-token }}" \
              -d "{\"name\":\"$REPO\", \"private\": true}" \
              https://api.github.com/user/repos
          fi

          git clone https://${{ inputs.access-token }}@github.com/${{ inputs.owner }}/$REPO.git
          cd $REPO
          git checkout "${{ inputs.branch }}" 2>/dev/null || git checkout -b "${{ inputs.branch }}"
          rm -rf *
          cp -r ../${{ inputs.root-repo }}/* .
          git add .
          git commit -m "Sync with root repository"
          git push origin "${{ inputs.branch }}"
          cd ..

          if [ -d "$REPO" ]; then
            echo "Cloned and synced $REPO repository successfully."
            echo "Access the repository content using \"cd $REPO.\""
          else
            echo "Error: Couldn't clone or sync $REPO repository. Check the inputs or the PAT scope."
            exit 1
          fi
        done
      shell: bash
